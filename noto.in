#!/usr/bin/env python3

import sys
import locale
import gettext
import signal
import os
import logging
import argparse

import gi

gi.require_version('Gtk', '3.0')
gi.require_version('GIRepository', '2.0')

from gi.repository import GIRepository, Gio, Gtk

SOURCE_DIR = os.path.abspath(os.path.dirname(__file__))
LOCALE_DIR = '@LOCALEDIR@'
PKG_DATA_DIR = '@PKGDATADIR@'
DATA_DIR = '@DATADIR@'
GSETTINGS_SCHEMA_DIR = '@GSETTINGSSCHEMADIR@'
PYTHON_DIR = '@PYTHONDIR@'

LOG_FORMAT = '%(asctime)s %(levelname)s\t%(message)s'
LOG_DATE_FORMAT = '%H:%M:%S'

def set_exception_hook():
    """Configures sys.excepthook to enforce Gtk application exiting."""

    def new_hook(etype, evalue, etb):
        old_hook(etype, evalue, etb)
        while Gtk.main_level():
            Gtk.main_quit()
        sys.exit()

    old_hook = sys.excepthook
    sys.excepthook = new_hook

def set_up_parser():
    """Sets up the commandline argument parser"""
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
                        default=False, help="enable debugging the program")
    parser.add_argument("-t", "--test", action="store_true",
                        default=False, help="enable code testing")
    return parser

def set_log_level(parser):
    """Sets application log level according to debug value."""
    args = parser.parse_args()
    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format=LOG_FORMAT,
                            datefmt=LOG_DATE_FORMAT)
        # Gtk hates "-d" switch, so lets drop it
        if '-d' in sys.argv:
            sys.argv.remove('-d')
        if '--debug' in sys.argv:
            sys.argv.remove('--debug')
    else:
        logging.basicConfig(level=logging.WARN, format=LOG_FORMAT,
                            datefmt=LOG_DATE_FORMAT)

# TODO: Add test harness

def set_internationalization():
    """Set application internationalization"""
    locale.bindtextdomain('noto', LOCALE_DIR)
    locale.textdomain('noto')
    gettext.bindtextdomain('noto', LOCALE_DIR)
    gettext.textdomain('noto')

def set_resources():
    """Sets application ressource file."""
    resource = Gio.resource_load(os.path.join(DATA_DIR, 'noto.gresource'))
    Gio.resources_register(resource)

def run_application():
    """Runs the application and returns its exit code."""
    from notosrc.app import Application
    
    application = Application()
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    try:
        ret = application.run(sys.argv)
    except SystemExit as e:
        ret = e.code

    return ret

def main():
    """Set up the environment and run Noto"""
    set_exception_hook()
    parser = set_up_parser()
    set_log_level(parser)
    set_internationalization()
    set_resources()
    return run_application()

if __name__ == "__main__":
    sys.path.insert(1, PYTHON_DIR)
    exit_status = main()
    sys.exit(exit_status)
